"use client"

import { useState } from 'react'
import { motion } from 'framer-motion'
import { Tag, ShieldAlert, Server, AlertCircle, CheckCircle2 } from 'lucide-react'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'

const pentestMachines = [
  {
    id: 1,
    name: "Fortress",
    difficulty: "Hard",
    description: "A heavily fortified server with multiple layers of security. Perfect for advanced penetration testers.",
    tags: ["Web", "Privilege Escalation", "Authentication Bypass"],
    status: "online",
  },
  {
    id: 2,
    name: "CryptoLock",
    difficulty: "Medium",
    description: "Focus on breaking various cryptographic implementations and secure communications.",
    tags: ["Cryptography", "Network", "Authentication"],
    status: "online",
  },
  {
    id: 3,
    name: "WebVulnHunt",
    difficulty: "Easy",
    description: "A beginner-friendly web application with common vulnerabilities to discover and exploit.",
    tags: ["Web", "SQL Injection", "XSS"],
    status: "online",
  },
  {
    id: 4,
    name: "NetworkMaze",
    difficulty: "Medium",
    description: "Navigate through a complex network setup with various services and find the path to root.",
    tags: ["Network", "Services", "Enumeration"],
    status: "maintenance",
  },
  {
    id: 5,
    name: "MemoryForensic",
    difficulty: "Hard",
    description: "Analyze memory dumps and perform advanced forensic techniques to uncover evidence.",
    tags: ["Forensics", "Memory Analysis", "Malware"],
    status: "online",
  },
  {
    id: 6,
    name: "IOTBreaker",
    difficulty: "Expert",
    description: "Exploit vulnerabilities in simulated IoT devices and their communication protocols.",
    tags: ["IoT", "Hardware", "Protocols"],
    status: "online",
  }
]

interface MachineCardProps {
  machine: typeof pentestMachines[0];
  index: number;
}

function getDifficultyColor(difficulty: string) {
  switch (difficulty.toLowerCase()) {
    case 'easy':
      return 'text-green-400';
    case 'medium':
      return 'text-yellow-400';
    case 'hard':
      return 'text-orange-400';
    case 'expert':
      return 'text-red-400';
    default:
      return 'text-primary';
  }
}

function MachineCard({ machine, index }: MachineCardProps) {
  const [isHovered, setIsHovered] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  
  const handleLaunch = () => {
    if (machine.status === 'online') {
      setIsLoading(true)
      // Simulate loading
      setTimeout(() => {
        setIsLoading(false)
      }, 2000)
    }
  }
  
  const difficultyColor = getDifficultyColor(machine.difficulty)
  
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      whileInView={{ opacity: 1, y: 0 }}
      viewport={{ once: true, margin: "-100px" }}
      transition={{ duration: 0.5, delay: index * 0.1 }}
      onHoverStart={() => setIsHovered(true)}
      onHoverEnd={() => setIsHovered(false)}
      className="relative rounded-lg border border-border overflow-hidden h-full transition-all duration-300 hover:border-primary hover:card-glow"
    >
      <div className="absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-primary via-secondary to-accent" />
      
      {/* Status indicator */}
      <div className="absolute top-4 right-4 flex items-center gap-1.5">
        {machine.status === 'online' ? (
          <Badge variant="outline" className="border-green-500 bg-green-500/10 text-green-400">
            <CheckCircle2 className="h-3 w-3 mr-1" />
            Online
          </Badge>
        ) : (
          <Badge variant="outline" className="border-orange-500 bg-orange-500/10 text-orange-400">
            <AlertCircle className="h-3 w-3 mr-1" />
            Maintenance
          </Badge>
        )}
      </div>
      
      <div className="p-6">
        <div className="mb-1 flex items-center gap-2">
          <Server className="h-5 w-5 text-primary" />
          <h3 className="text-xl font-bold tracking-tight">{machine.name}</h3>
        </div>
        
        <p className={`text-sm mb-4 ${difficultyColor}`}>
          Difficulty: {machine.difficulty}
        </p>
        
        <p className="text-foreground/70 text-sm mb-4">
          {machine.description}
        </p>
        
        <div className="mb-6">
          <div className="flex items-center gap-1.5 mb-2 text-xs text-foreground/60">
            <Tag className="h-3 w-3" />
            <span>TAGS:</span>
          </div>
          <div className="flex flex-wrap gap-2">
            {machine.tags.map((tag) => (
              <Badge key={tag} variant="secondary" className="bg-secondary/20">
                {tag}
              </Badge>
            ))}
          </div>
        </div>
        
        <Button 
          variant={machine.status === 'online' ? 'glow' : 'outline'}
          className="w-full"
          disabled={machine.status !== 'online' || isLoading}
          onClick={handleLaunch}
        >
          {isLoading ? (
            <>
              <motion.div
                animate={{ rotate: 360 }}
                transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                className="mr-2 h-4 w-4 border-2 border-t-transparent border-primary rounded-full"
              />
              Launching...
            </>
          ) : (
            machine.status === 'online' ? 'Launch Machine' : 'Unavailable'
          )}
        </Button>
      </div>
      
      {/* Machine terminal preview on hover */}
      {isHovered && machine.status === 'online' && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="absolute inset-0 bg-background/80 backdrop-blur-sm flex items-center justify-center p-6"
        >
          <div className="w-full max-w-md bg-black/70 rounded-md overflow-hidden border border-muted">
            <div className="bg-muted/30 px-4 py-2 flex items-center gap-2">
              <div className="w-3 h-3 rounded-full bg-red-500" />
              <div className="w-3 h-3 rounded-full bg-yellow-500" />
              <div className="w-3 h-3 rounded-full bg-green-500" />
              <span className="text-xs text-muted-foreground ml-2">terminal â€“ {machine.name.toLowerCase()}</span>
            </div>
            <div className="p-4 text-sm font-mono">
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.2 }}
                className="text-primary"
              >
                $ ssh kyubi@{machine.name.toLowerCase()}.kyubisec.com
              </motion.div>
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.5 }}
                className="text-muted-foreground"
              >
                Connecting to {machine.name}...
              </motion.div>
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.8 }}
                className="text-yellow-400"
              >
                Welcome to KyubiSec {machine.name} machine!
              </motion.div>
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 1.1 }}
                className="text-muted-foreground"
              >
                Find the flags and submit them to score points.
              </motion.div>
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 1.4 }}
                className="text-primary"
              >
                $ _
              </motion.div>
              <motion.div
                animate={{ opacity: [0, 1, 0] }}
                transition={{ repeat: Infinity, duration: 1 }}
                className="inline-block w-2 h-4 bg-primary ml-1"
              />
            </div>
          </div>
        </motion.div>
      )}
    </motion.div>
  )
}

export function PentestSection() {
  return (
    <section id="pentest" className="py-20 bg-gradient-to-b from-background via-muted/5 to-background">
      <div className="container mx-auto px-4">
        <motion.div 
          initial={{ opacity: 0 }}
          whileInView={{ opacity: 1 }}
          viewport={{ once: true, margin: "-100px" }}
          transition={{ duration: 0.6 }}
          className="text-center mb-16"
        >
          <h2 className="text-3xl md:text-4xl font-bold mb-4 tracking-tight">
            <span className="text-secondary glow-secondary">Pentest</span> Machines
          </h2>
          <div className="h-1 w-20 bg-secondary mx-auto rounded-full mb-6" />
          <p className="text-lg text-foreground/80 max-w-2xl mx-auto">
            Hone your skills on our carefully crafted penetration testing machines.
            Each environment offers unique challenges and learning opportunities.
          </p>
        </motion.div>
        
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {pentestMachines.map((machine, index) => (
            <MachineCard key={machine.id} machine={machine} index={index} />
          ))}
        </div>
        
        <motion.div
          initial={{ opacity: 0 }}
          whileInView={{ opacity: 1 }}
          viewport={{ once: true }}
          transition={{ duration: 0.6, delay: 0.4 }}
          className="mt-12 text-center"
        >
          <Button variant="glowSecondary" size="lg">
            View All Machines
          </Button>
        </motion.div>
      </div>
    </section>
  )
}